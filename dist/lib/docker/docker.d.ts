import { NasConfig, ServiceConfig } from '../interface/fc-service';
import { FunctionConfig } from '../interface/fc-function';
import { ICredentials } from '../../common/entity';
export declare function resolveNasConfigToMounts(baseDir: string, serviceName: string, nasConfig: NasConfig, nasBaseDir: string): Promise<any>;
export declare function resolveTmpDirToMount(absTmpDir: string): Promise<any>;
export declare function resolveDebuggerPathToMount(debuggerPath: string): Promise<any>;
export declare function resolveCodeUriToMount(absCodeUri: string, readOnly?: boolean): Promise<any>;
export declare function resolvePasswdMount(): Promise<any>;
export declare function conventInstallTargetsToMounts(installTargets: any): any;
export declare function imageExist(imageName: string): Promise<boolean>;
export declare function listContainers(options: any): Promise<any>;
export declare function getContainer(containerId: any): Promise<any>;
export declare function renameContainer(container: any, name: string): Promise<any>;
export declare function generateDockerCmd(runtime: string, isLocalStartInit: boolean, functionConfig?: FunctionConfig, httpMode?: boolean, invokeInitializer?: boolean, event?: any): string[];
export declare function pullImage(imageName: string, needResolveImageName?: boolean): Promise<any>;
export declare function generateFunctionEnvs(functionConfig: FunctionConfig): any;
export declare function generateRamdomContainerName(): string;
export declare function generateDockerEnvs(creds: ICredentials, region: string, baseDir: string, serviceName: string, serviceProps: ServiceConfig, functionName: string, functionProps: FunctionConfig, debugPort: number, httpParams: any, nasConfig: NasConfig, ishttpTrigger: boolean, debugIde: any, debugArgs?: any): Promise<any>;
export declare function pullImageIfNeed(imageName: string, needResolveImageName?: boolean): Promise<void>;
export declare function showDebugIdeTipsForVscode(serviceName: string, functionName: string, runtime: string, codeSource: string, debugPort?: number): Promise<void>;
export declare function writeDebugIdeConfigForVscode(baseDir: string, serviceName: string, functionName: string, runtime: string, codeSource: string, debugPort?: number): Promise<void>;
export declare function showDebugIdeTipsForPycharm(codeSource: string, debugPort: number): Promise<void>;
export declare function isDockerToolBoxAndEnsureDockerVersion(): Promise<boolean>;
export declare function runContainer(opts: any, outputStream: any, errorStream: any, context?: any): Promise<{
    container: any;
    stream: any;
}>;
export declare function exitContainer(container: any): Promise<void>;
export declare function run(opts: any, event: any, outputStream: any, errorStream: any, context?: {}): Promise<any>;
export declare function createAndRunContainer(opts: any): Promise<any>;
export declare function execContainer(container: any, opts: any, outputStream: any, errorStream: any): Promise<void>;
export declare function startContainer(opts: any, outputStream?: any, errorStream?: any, context?: any): Promise<any>;
export declare function startInstallationContainer({ runtime, imageName, codeUri, targets, context }: {
    runtime: any;
    imageName: any;
    codeUri: any;
    targets: any;
    context: any;
}): Promise<any>;
export declare function startSboxContainer({ runtime, imageName, mounts, cmd, envs, isTty, isInteractive }: {
    runtime: any;
    imageName: any;
    mounts: any;
    cmd: any;
    envs: any;
    isTty: any;
    isInteractive: any;
}): Promise<void>;
export declare function copyFromImage(imageName: string, from: string, to: string): Promise<void>;
export declare function buildImage(dockerBuildDir: string, dockerfilePath: string, imageTag: string): Promise<any>;
export declare function detectDockerVersion(serverVersion: string): Promise<void>;
